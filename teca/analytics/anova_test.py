
import numpy as np
import scipy as sp
import scipy.stats.mstats as spm
import scipy.stats as sps

############ RES FOR AUTOMATED COLLECTED CORPUS ###################
#html2vectors Max.Acc(s)
#lxml Max.Acc(s)
#nltk Max.Acc(s)
#htmlremover Max.Acc(s)
#Rapidminer Max.Acc(s)
#Detagger Max.Acc(s)
#Html2ascii Max.Acc(s)
#Html2Text Max.Acc(s)
max_accs_array = np.array([ [98.091603053435108, 92.748091603053439, 97.709923664122144, 88.549618320610691, 92.748091603053439,\
                             95.038167938931295, 96.564885496183209, 80.152671755725194, 84.351145038167942, 89.312977099236647],\
                            [98.091603053435108, 92.36641221374046, 96.18320610687023, 87.022900763358777, 93.129770992366417,\
                             94.656488549618317, 94.656488549618317, 79.770992366412216, 84.351145038167942, 88.167938931297712],\
                            [98.091603053435108, 93.511450381679396, 87.022900763358777, 86.25954198473282, 92.748091603053439,\
                             94.656488549618317, 88.549618320610691, 77.480916030534345, 84.351145038167942, 88.931297709923669],\
                            [98.091603053435108, 92.36641221374046, 94.274809160305338, 87.404580152671755, 91.221374045801525,\
                             94.656488549618317, 94.656488549618317, 75.572519083969468, 83.587786259541986, 90.458015267175568],\
                            [97.328244274809165, 92.36641221374046, 98.091603053435108, 88.167938931297712, 91.221374045801525,\
                             93.89312977099236, 95.419847328244273, 79.007633587786259, 84.351145038167942, 90.458015267175568],\
                            [98.007968127490045, 97.211155378486055, 92.430278884462155, 89.641434262948209, 90.438247011952186,\
                             91.633466135458164, 94.023904382470121, 83.665338645418331, 92.430278884462155, 90.438247011952186],\
                            [89.694656488549612, 87.786259541984734, 85.877862595419842, 87.404580152671755, 89.694656488549612,\
                             83.587786259541986, 90.839694656488547, 75.954198473282446, 91.221374045801525, 88.931297709923669],\
                            [99.227799227799224, 89.575289575289574, 96.138996138996134, 86.872586872586879, 94.594594594594597,\
                             89.575289575289574, 96.138996138996134, 82.239382239382238, 86.486486486486484, 87.25868725868726]\
                        ])

############ RES FOR MANUALLY SELECTED COLLECTED CORPUS 5-fold ###################
#html2vectors Max.Acc(s)
#lxml Max.Acc(s)
#nltk Max.Acc(s)
#htmlremover Max.Acc(s)
#Rapidminer Max.Acc(s)
#Detagger Max.Acc(s)
#Html2ascii Max.Acc(s)
#Html2Text Max.Acc(s)
max_accs_array = np.array([ [94.666666666666671, 84.0, 96.0, 96.0, 86.666666666666671],\
                            [94.666666666666671, 85.333333333333329, 96.0, 97.333333333333329, 86.666666666666671],\
                            [94.666666666666671, 85.333333333333329, 94.666666666666671, 96.0, 88.0],\
                            [96.0, 84.0, 94.666666666666671, 98.666666666666671, 88.0],\
                            [93.333333333333329, 85.333333333333329, 94.666666666666671, 96.0, 85.333333333333329],\
                            [87.142857142857139, 77.142857142857139, 88.571428571428569, 92.857142857142861, 91.428571428571431],\
                            [86.666666666666671, 85.333333333333329, 94.666666666666671, 93.333333333333329, 81.333333333333329],\
                            [93.150684931506845, 89.041095890410958, 95.890410958904113, 97.260273972602747, 80.821917808219183]\
                        ])
                
############ RES FOR MANUALLY SELECTED COLLECTED CORPUS 25-fold ###################
#html2vectors Max.Acc(s)
#lxml Max.Acc(s)
#nltk Max.Acc(s)
#htmlremover Max.Acc(s)
#Rapidminer Max.Acc(s)
#Detagger Max.Acc(s)
#Html2ascii Max.Acc(s)
#Html2Text Max.Acc(s)
max_accs_array = np.array([ [93.333333333333329, 93.333333333333329, 73.333333333333329, 100.0, 100.0, 86.666666666666671, 100.0, 100.0,\
                             86.666666666666671, 66.666666666666671, 86.666666666666671, 80.0, 100.0, 80.0, 100.0, 100.0, 93.333333333333329,\
                             93.333333333333329, 100.0, 93.333333333333329, 100.0, 93.333333333333329, 86.666666666666671, 93.333333333333329, 100.0],\
                            [100.0, 100.0, 93.333333333333329, 100.0, 100.0, 93.333333333333329, 100.0, 93.333333333333329, 93.333333333333329,\
                             66.666666666666671, 100.0, 86.666666666666671, 100.0, 100.0, 100.0, 100.0, 93.333333333333329, 93.333333333333329,\
                             100.0, 100.0, 86.666666666666671, 80.0, 60.0, 100.0, 100.0],\
                            [100.0, 100.0, 80.0, 100.0, 93.333333333333329, 93.333333333333329, 100.0, 100.0, 93.333333333333329, 53.333333333333336,\
                             93.333333333333329, 80.0, 100.0, 100.0, 100.0, 100.0, 93.333333333333329, 86.666666666666671, 100.0, 100.0, 80.0, 80.0,\
                             80.0, 100.0, 100.0],\
                            [100.0, 100.0, 86.666666666666671, 100.0, 93.333333333333329, 93.333333333333329, 100.0, 93.333333333333329,\
                             93.333333333333329, 60.0, 93.333333333333329, 86.666666666666671, 100.0, 100.0, 100.0, 100.0, 100.0, 93.333333333333329,\
                             100.0, 100.0, 80.0, 80.0, 80.0, 100.0, 100.0],\
                            [100.0, 100.0, 80.0, 100.0, 100.0, 93.333333333333329, 100.0, 93.333333333333329, 93.333333333333329, 53.333333333333336,\
                             100.0, 86.666666666666671, 100.0, 100.0, 100.0, 100.0, 86.666666666666671, 93.333333333333329, 100.0, 100.0,\
                             86.666666666666671, 80.0, 60.0, 100.0, 100.0],\
                            [100.0, 100.0, 90.909090909090907, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 90.909090909090907, 100.0, 72.727272727272734,\
                             72.727272727272734, 100.0, 100.0, 90.909090909090907, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 81.818181818181813,\
                             90.909090909090907],\
                            [86.666666666666671, 66.666666666666671, 80.0, 100.0, 93.333333333333329, 80.0, 100.0, 93.333333333333329, 73.333333333333329,\
                             73.333333333333329, 80.0, 93.333333333333329, 100.0, 100.0, 100.0, 100.0, 100.0, 93.333333333333329, 80.0, 100.0, 80.0,\
                             86.666666666666671, 80.0, 100.0, 93.333333333333329],\
                            [100.0, 100.0, 85.714285714285708, 100.0, 100.0, 100.0, 100.0, 92.857142857142861, 92.857142857142861, 64.285714285714292,\
                             100.0, 85.714285714285708, 100.0, 100.0, 92.857142857142861, 100.0, 92.857142857142861, 92.857142857142861, 100.0, 100.0,\
                             85.714285714285708, 78.571428571428569, 78.571428571428569, 92.857142857142861, 78.571428571428569]\
                        ])

############ RES FOR SANTINI'S 10-fold ###################
#html2vectors Max.Acc(s)
#lxml Max.Acc(s)
#nltk Max.Acc(s)
#htmlremover Max.Acc(s)
#Rapidminer Max.Acc(s)
#Detagger Max.Acc(s)
#Html2ascii Max.Acc(s)
#Html2Text Max.Acc(s)
max_accs_array = np.array([ [93.333333333333329, 93.333333333333329, 95.555555555555557, 94.81481481481481, 94.81481481481481,\
                             97.777777777777771, 97.777777777777771, 98.518518518518519, 95.555555555555557, 91.111111111111114],\
                            [94.074074074074076, 93.333333333333329, 95.555555555555557, 96.296296296296291, 94.81481481481481,\
                             97.777777777777771, 97.037037037037038, 99.259259259259252, 94.074074074074076, 93.333333333333329],\
                            [94.074074074074076, 94.81481481481481, 94.074074074074076, 94.81481481481481, 95.555555555555557,\
                             96.296296296296291, 97.777777777777771, 99.259259259259252, 95.555555555555557, 94.81481481481481],\
                            [92.592592592592595, 94.81481481481481, 95.555555555555557, 94.81481481481481, 94.81481481481481,\
                             96.296296296296291, 97.037037037037038, 97.777777777777771, 94.81481481481481, 93.333333333333329],\
                            [94.81481481481481, 93.333333333333329, 94.074074074074076, 97.037037037037038, 95.555555555555557,\
                             97.777777777777771, 97.037037037037038, 99.259259259259252, 94.81481481481481, 94.81481481481481],\
                            [97.014925373134332, 98.507462686567166, 97.014925373134332, 99.253731343283576, 97.014925373134332,\
                             100.0, 98.507462686567166, 98.507462686567166, 97.761194029850742, 97.761194029850742],\
                            [90.370370370370367, 97.037037037037038, 94.074074074074076, 95.555555555555557, 91.111111111111114,\
                             95.555555555555557, 97.037037037037038, 97.777777777777771, 95.555555555555557, 94.81481481481481],\
                            [93.814432989690715, 91.75257731958763, 93.814432989690715, 93.814432989690715, 93.814432989690715,\
                             89.69072164948453, 96.907216494845358, 92.783505154639172, 95.876288659793815, 98.969072164948457]\
                        ])


############### Tool's MAX.ACC PER CORPUS #################
#max_accs_array = np.array([ [ 95.26, 95.56, 95.70, 95.18, 95.85, 98.13, 94.88, 94.12 ],\
#                            [ 91.53, 90.84, 89.16, 90.23, 91.03, 91.99, 87.09, 90.81 ],\
#                            [ 91.47, 92.00, 91.73, 92.27, 90.67, 87.43, 88.27, 91.23 ],\
#                            [ 92.00, 93.60, 92.27, 93.33, 92.27, 95.27, 89.33, 92.57 ],\
#                         ])

print spm.kruskalwallis(max_accs_array[0],max_accs_array[1],max_accs_array[2],max_accs_array[3],\
                        max_accs_array[4],max_accs_array[6],max_accs_array[7])
print spm.kruskalwallis(max_accs_array[5],max_accs_array[2])
#print sps.wilcoxon(max_accs_array[1],max_accs_array[4])
print spm.mannwhitneyu(max_accs_array[5],max_accs_array[2]) #, use_continuity=True)
0/0

#print max_accs_array

#import matplotlib.pyplot as plt
#plt.hist(max_accs_array[1], 10) #bins, range, normed, weights, cumulative, bottom, histtype, align, orientation, rwidth, log, hold))
#plt.figure()
#plt.plot([1,2,3,4,5,6,7,8,9,10],max_accs_array[7] ) #, histtype='bar', rwidth=0.8)
#plt.show()

print max_accs_array, "\n"

max_accs_vect = max_accs_array.copy()
#max_accs_vect = max_accs_vect.reshape(1,80)
max_accs_vect = max_accs_vect.reshape(1,32)
max_accs_vect.sort()
max_accs_vect = max_accs_vect[0]

max_accs_vect = max_accs_vect[::-1] 

print max_accs_array



val_rank_array = np.zeros(len(max_accs_vect))

#print val_rank_array

for i,acc in enumerate(max_accs_vect):
    inds = np.where(max_accs_vect==acc)
    #print inds
    idxs_amnt = len(inds[0])
    val_rank_array[i] = (inds[0].sum()+float(idxs_amnt))/float(idxs_amnt) 

print val_rank_array

tools_score_tb = np.zeros(shape=max_accs_array.shape, dtype=np.float)
print tools_score_tb

print max_accs_array
for i,acc in enumerate(max_accs_vect):
    idx_tpl = np.where(max_accs_array==acc)
    #print max_accs_array[idx_tpl] = 
    tools_score_tb[idx_tpl] = val_rank_array[i]
print tools_score_tb 

#n = np.array([10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], dtype=np.float)
n = np.array([8.0, 8.0, 8.0, 8.0], dtype=np.float)
N = n.sum()
#k = np.array([8.0])
k = np.array([4.0])

#SH = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
SH = np.array([0.0, 0.0, 0.0, 0.0])
for i in range(len(SH)):
    print tools_score_tb[i].sum()
    SH[i] = np.square(tools_score_tb[i].sum())/n[i]

H = ( 12 / (N*(N+1)) )*SH.sum() - 3*(N+1)    

print H


0/0

########### ANOVA ############

Means = np.array([ 91.5267175573, 90.8396946565, 89.1603053435, 90.2290076336, 91.0305343511, 91.9920318725, 87.0992366412, 90.8108108108 ])

acc_vars =  max_accs_array.var(1)
print acc_vars
acc_means =  max_accs_array.mean(1)
#grand_mean = Means.mean()
grand_mean = acc_means.mean()
n = np.array([10.0, 10.0, 10.0, 10.0, 10.0, 10.0 ,10.0 ,10.0]) 
#n = np.array([8.0, 8.0, 8.0, 8.0])
N = n.sum()
k = 8.0
#k = 4.0

vb = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) 
#vb = np.array([0.0, 0.0, 0.0, 0.0])
for i in range(len(acc_means)):
    vb[i] = n[i]*np.square(acc_means[i] - grand_mean)
print vb
vb = vb.sum()/(k - 1.0)

vw = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
#vw = np.array([0.0, 0.0, 0.0, 0.0])
for i in range(len(acc_vars)): 
    vw[i] = ( (n[i] - 1.0)/(N - k) )*acc_vars[i]
vw = vw.sum()

f1 = k - 1
print N
f2 = N - k

print f1, f2, vb, vw, vb/vw
    

 




